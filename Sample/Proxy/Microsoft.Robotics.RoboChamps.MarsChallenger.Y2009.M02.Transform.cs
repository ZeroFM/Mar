//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:2.0.50727.3074
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Reflection.AssemblyVersionAttribute("1.0.0.0")]
[assembly: global::Microsoft.Dss.Core.Attributes.ServiceDeclarationAttribute(global::Microsoft.Dss.Core.Attributes.DssServiceDeclaration.Transform, SourceAssemblyKey="Microsoft.Robotics.RoboChamps.MarsChallenger.Y2009.M02, Version=1.0.0.0, Culture=" +
    "neutral, PublicKeyToken=341fb87eeeef4866")]
[assembly: global::System.Security.SecurityTransparentAttribute()]
[assembly: global::System.Security.AllowPartiallyTrustedCallersAttribute()]

namespace Dss.Transforms.TransformMicrosoft {
    
    
    public class Transforms : global::Microsoft.Dss.Core.Transforms.TransformBase {
        
        static Transforms() {
            Register();
        }
        
        public static void Register() {
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.VisionResult), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_RoboChamps_MarsChallenger_StereoVision_Proxy_VisionResult_TO_Microsoft_Robotics_RoboChamps_MarsChallenger_StereoVision_VisionResult));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.VisionResult), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_RoboChamps_MarsChallenger_StereoVision_VisionResult_TO_Microsoft_Robotics_RoboChamps_MarsChallenger_StereoVision_Proxy_VisionResult));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.Rock), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_RoboChamps_MarsChallenger_StereoVision_Proxy_Rock_TO_Microsoft_Robotics_RoboChamps_MarsChallenger_StereoVision_Rock));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Rock), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_RoboChamps_MarsChallenger_StereoVision_Rock_TO_Microsoft_Robotics_RoboChamps_MarsChallenger_StereoVision_Proxy_Rock));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.Blob), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_RoboChamps_MarsChallenger_StereoVision_Proxy_Blob_TO_Microsoft_Robotics_RoboChamps_MarsChallenger_StereoVision_Blob));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Blob), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_RoboChamps_MarsChallenger_StereoVision_Blob_TO_Microsoft_Robotics_RoboChamps_MarsChallenger_StereoVision_Proxy_Blob));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.Mode), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_RoboChamps_MarsChallenger_StereoVision_Proxy_Mode_TO_Microsoft_Robotics_RoboChamps_MarsChallenger_StereoVision_Mode));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Mode), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_RoboChamps_MarsChallenger_StereoVision_Mode_TO_Microsoft_Robotics_RoboChamps_MarsChallenger_StereoVision_Proxy_Mode));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.StereoVisionState), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_RoboChamps_MarsChallenger_StereoVision_Proxy_StereoVisionState_TO_Microsoft_Robotics_RoboChamps_MarsChallenger_StereoVision_StereoVisionState));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.StereoVisionState), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_RoboChamps_MarsChallenger_StereoVision_StereoVisionState_TO_Microsoft_Robotics_RoboChamps_MarsChallenger_StereoVision_Proxy_StereoVisionState));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.RoboChamps.MarsChallenger.Proxy.MarsChallengerState), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_RoboChamps_MarsChallenger_Proxy_MarsChallengerState_TO_Microsoft_Robotics_RoboChamps_MarsChallenger_MarsChallengerState));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.RoboChamps.MarsChallenger.MarsChallengerState), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_RoboChamps_MarsChallenger_MarsChallengerState_TO_Microsoft_Robotics_RoboChamps_MarsChallenger_Proxy_MarsChallengerState));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.Proxy.ImageResult), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_RoboChamps_MarsChallenger_ImageProcessing_Proxy_ImageResult_TO_Microsoft_Robotics_RoboChamps_MarsChallenger_ImageProcessing_ImageResult));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.ImageResult), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_RoboChamps_MarsChallenger_ImageProcessing_ImageResult_TO_Microsoft_Robotics_RoboChamps_MarsChallenger_ImageProcessing_Proxy_ImageResult));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.Proxy.target), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_RoboChamps_MarsChallenger_ImageProcessing_Proxy_target_TO_Microsoft_Robotics_RoboChamps_MarsChallenger_ImageProcessing_target));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.target), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_RoboChamps_MarsChallenger_ImageProcessing_target_TO_Microsoft_Robotics_RoboChamps_MarsChallenger_ImageProcessing_Proxy_target));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.RoboChamps.MarsChallenger.Proxy.DriveState), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_RoboChamps_MarsChallenger_Proxy_DriveState_TO_Microsoft_Robotics_RoboChamps_MarsChallenger_DriveState));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.RoboChamps.MarsChallenger.DriveState), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_RoboChamps_MarsChallenger_DriveState_TO_Microsoft_Robotics_RoboChamps_MarsChallenger_Proxy_DriveState));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.RoboChamps.MarsChallenger.Proxy.HeadState), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_RoboChamps_MarsChallenger_Proxy_HeadState_TO_Microsoft_Robotics_RoboChamps_MarsChallenger_HeadState));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.RoboChamps.MarsChallenger.HeadState), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_RoboChamps_MarsChallenger_HeadState_TO_Microsoft_Robotics_RoboChamps_MarsChallenger_Proxy_HeadState));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.RoboChamps.MarsChallenger.Proxy.SensorInterval), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_RoboChamps_MarsChallenger_Proxy_SensorInterval_TO_Microsoft_Robotics_RoboChamps_MarsChallenger_SensorInterval));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.RoboChamps.MarsChallenger.SensorInterval), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_RoboChamps_MarsChallenger_SensorInterval_TO_Microsoft_Robotics_RoboChamps_MarsChallenger_Proxy_SensorInterval));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.RoboChamps.MarsChallenger.Proxy.Mission), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_RoboChamps_MarsChallenger_Proxy_Mission_TO_Microsoft_Robotics_RoboChamps_MarsChallenger_Mission));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.RoboChamps.MarsChallenger.Mission), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_RoboChamps_MarsChallenger_Mission_TO_Microsoft_Robotics_RoboChamps_MarsChallenger_Proxy_Mission));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.RoboChamps.MarsChallenger.Proxy.InitializeRequest), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_RoboChamps_MarsChallenger_Proxy_InitializeRequest_TO_Microsoft_Robotics_RoboChamps_MarsChallenger_InitializeRequest));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.RoboChamps.MarsChallenger.InitializeRequest), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_RoboChamps_MarsChallenger_InitializeRequest_TO_Microsoft_Robotics_RoboChamps_MarsChallenger_Proxy_InitializeRequest));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.Proxy.ImageProcessingState), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_RoboChamps_MarsChallenger_ImageProcessing_Proxy_ImageProcessingState_TO_Microsoft_Robotics_RoboChamps_MarsChallenger_ImageProcessing_ImageProcessingState));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.ImageProcessingState), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_RoboChamps_MarsChallenger_ImageProcessing_ImageProcessingState_TO_Microsoft_Robotics_RoboChamps_MarsChallenger_ImageProcessing_Proxy_ImageProcessingState));
        }
        
        public static object Microsoft_Robotics_RoboChamps_MarsChallenger_StereoVision_Proxy_VisionResult_TO_Microsoft_Robotics_RoboChamps_MarsChallenger_StereoVision_VisionResult(object transformFrom) {
            global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.VisionResult target = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.VisionResult();
            global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.VisionResult from = ((global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.VisionResult)(transformFrom));
            if ((from.Rocks != null)) {
                int count = from.Rocks.Length;
                global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Rock[] tmp = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Rock[count];
                for (int index = 0; (index < count); index = (index + 1)) {
                    global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Rock tmp0 = default(global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Rock);
                    if ((from.Rocks[index] != null)) {
                        tmp0 = ((global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Rock)(Microsoft_Robotics_RoboChamps_MarsChallenger_StereoVision_Proxy_Rock_TO_Microsoft_Robotics_RoboChamps_MarsChallenger_StereoVision_Rock(from.Rocks[index])));
                    }
                    else {
                        tmp0 = null;
                    }
                    tmp[index] = tmp0;
                }
                target.Rocks = tmp;
            }
            else {
                target.Rocks = null;
            }
            target.Center_x = from.Center_x;
            target.Center_y = from.Center_y;
            if ((from.PanBlobs != null)) {
                int count0 = from.PanBlobs.Length;
                global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Blob[] tmp1 = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Blob[count0];
                for (int index0 = 0; (index0 < count0); index0 = (index0 + 1)) {
                    global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Blob tmp2 = default(global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Blob);
                    if ((from.PanBlobs[index0] != null)) {
                        tmp2 = ((global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Blob)(Microsoft_Robotics_RoboChamps_MarsChallenger_StereoVision_Proxy_Blob_TO_Microsoft_Robotics_RoboChamps_MarsChallenger_StereoVision_Blob(from.PanBlobs[index0])));
                    }
                    else {
                        tmp2 = null;
                    }
                    tmp1[index0] = tmp2;
                }
                target.PanBlobs = tmp1;
            }
            else {
                target.PanBlobs = null;
            }
            if ((from.NavBlobs != null)) {
                int count1 = from.NavBlobs.Length;
                global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Blob[] tmp3 = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Blob[count1];
                for (int index1 = 0; (index1 < count1); index1 = (index1 + 1)) {
                    global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Blob tmp4 = default(global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Blob);
                    if ((from.NavBlobs[index1] != null)) {
                        tmp4 = ((global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Blob)(Microsoft_Robotics_RoboChamps_MarsChallenger_StereoVision_Proxy_Blob_TO_Microsoft_Robotics_RoboChamps_MarsChallenger_StereoVision_Blob(from.NavBlobs[index1])));
                    }
                    else {
                        tmp4 = null;
                    }
                    tmp3[index1] = tmp4;
                }
                target.NavBlobs = tmp3;
            }
            else {
                target.NavBlobs = null;
            }
            target.TimeStamp = from.TimeStamp;
            return target;
        }
        
        public static object Microsoft_Robotics_RoboChamps_MarsChallenger_StereoVision_VisionResult_TO_Microsoft_Robotics_RoboChamps_MarsChallenger_StereoVision_Proxy_VisionResult(object transformFrom) {
            global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.VisionResult target = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.VisionResult();
            global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.VisionResult from = ((global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.VisionResult)(transformFrom));
            Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Rock[] tmp = from.Rocks;
            if ((tmp != null)) {
                int count = tmp.Length;
                global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.Rock[] tmp0 = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.Rock[count];
                for (int index = 0; (index < count); index = (index + 1)) {
                    global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.Rock tmp1 = default(global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.Rock);
                    global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Rock tmp2 = tmp[index];
                    if ((tmp2 != null)) {
                        tmp1 = ((global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.Rock)(Microsoft_Robotics_RoboChamps_MarsChallenger_StereoVision_Rock_TO_Microsoft_Robotics_RoboChamps_MarsChallenger_StereoVision_Proxy_Rock(tmp2)));
                    }
                    tmp0[index] = tmp1;
                }
                target.Rocks = tmp0;
            }
            target.Center_x = from.Center_x;
            target.Center_y = from.Center_y;
            Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Blob[] tmp3 = from.PanBlobs;
            if ((tmp3 != null)) {
                int count0 = tmp3.Length;
                global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.Blob[] tmp4 = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.Blob[count0];
                for (int index0 = 0; (index0 < count0); index0 = (index0 + 1)) {
                    global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.Blob tmp5 = default(global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.Blob);
                    global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Blob tmp6 = tmp3[index0];
                    if ((tmp6 != null)) {
                        tmp5 = ((global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.Blob)(Microsoft_Robotics_RoboChamps_MarsChallenger_StereoVision_Blob_TO_Microsoft_Robotics_RoboChamps_MarsChallenger_StereoVision_Proxy_Blob(tmp6)));
                    }
                    tmp4[index0] = tmp5;
                }
                target.PanBlobs = tmp4;
            }
            Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Blob[] tmp7 = from.NavBlobs;
            if ((tmp7 != null)) {
                int count1 = tmp7.Length;
                global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.Blob[] tmp8 = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.Blob[count1];
                for (int index1 = 0; (index1 < count1); index1 = (index1 + 1)) {
                    global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.Blob tmp9 = default(global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.Blob);
                    global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Blob tmp10 = tmp7[index1];
                    if ((tmp10 != null)) {
                        tmp9 = ((global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.Blob)(Microsoft_Robotics_RoboChamps_MarsChallenger_StereoVision_Blob_TO_Microsoft_Robotics_RoboChamps_MarsChallenger_StereoVision_Proxy_Blob(tmp10)));
                    }
                    tmp8[index1] = tmp9;
                }
                target.NavBlobs = tmp8;
            }
            target.TimeStamp = from.TimeStamp;
            return target;
        }
        
        public static object Microsoft_Robotics_RoboChamps_MarsChallenger_StereoVision_Proxy_Rock_TO_Microsoft_Robotics_RoboChamps_MarsChallenger_StereoVision_Rock(object transformFrom) {
            global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Rock target = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Rock();
            global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.Rock from = ((global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.Rock)(transformFrom));
            target.X = from.X;
            target.Y = from.Y;
            target.Z = from.Z;
            target.Score = from.Score;
            target.PanBlob_num = from.PanBlob_num;
            target.NavBlob_num = from.NavBlob_num;
            target.Type = ((global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.RockType)(((int)(from.Type))));
            return target;
        }
        
        public static object Microsoft_Robotics_RoboChamps_MarsChallenger_StereoVision_Rock_TO_Microsoft_Robotics_RoboChamps_MarsChallenger_StereoVision_Proxy_Rock(object transformFrom) {
            global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.Rock target = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.Rock();
            global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Rock from = ((global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Rock)(transformFrom));
            target.X = from.X;
            target.Y = from.Y;
            target.Z = from.Z;
            target.Score = from.Score;
            target.PanBlob_num = from.PanBlob_num;
            target.NavBlob_num = from.NavBlob_num;
            target.Type = ((global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.RockType)(((int)(from.Type))));
            return target;
        }
        
        public static object Microsoft_Robotics_RoboChamps_MarsChallenger_StereoVision_Proxy_Blob_TO_Microsoft_Robotics_RoboChamps_MarsChallenger_StereoVision_Blob(object transformFrom) {
            global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Blob target = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Blob();
            global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.Blob from = ((global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.Blob)(transformFrom));
            target.x = from.x;
            target.y = from.y;
            target.max_x = from.max_x;
            target.max_y = from.max_y;
            target.min_x = from.min_x;
            target.min_y = from.min_y;
            target.sum_R = from.sum_R;
            target.sum_B = from.sum_B;
            target.sum_G = from.sum_G;
            target.pexel_num = from.pexel_num;
            target.Rock_Pro = from.Rock_Pro;
            target.Shield_Pro = from.Shield_Pro;
            return target;
        }
        
        public static object Microsoft_Robotics_RoboChamps_MarsChallenger_StereoVision_Blob_TO_Microsoft_Robotics_RoboChamps_MarsChallenger_StereoVision_Proxy_Blob(object transformFrom) {
            global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.Blob target = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.Blob();
            global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Blob from = ((global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Blob)(transformFrom));
            target.x = from.x;
            target.y = from.y;
            target.max_x = from.max_x;
            target.max_y = from.max_y;
            target.min_x = from.min_x;
            target.min_y = from.min_y;
            target.sum_R = from.sum_R;
            target.sum_B = from.sum_B;
            target.sum_G = from.sum_G;
            target.pexel_num = from.pexel_num;
            target.Rock_Pro = from.Rock_Pro;
            target.Shield_Pro = from.Shield_Pro;
            return target;
        }
        
        public static object Microsoft_Robotics_RoboChamps_MarsChallenger_StereoVision_Proxy_Mode_TO_Microsoft_Robotics_RoboChamps_MarsChallenger_StereoVision_Mode(object transformFrom) {
            global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Mode target = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Mode();
            global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.Mode from = ((global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.Mode)(transformFrom));
            target.mode = ((global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Search)(((int)(from.mode))));
            return target;
        }
        
        public static object Microsoft_Robotics_RoboChamps_MarsChallenger_StereoVision_Mode_TO_Microsoft_Robotics_RoboChamps_MarsChallenger_StereoVision_Proxy_Mode(object transformFrom) {
            global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.Mode target = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.Mode();
            global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Mode from = ((global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Mode)(transformFrom));
            target.mode = ((global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.Search)(((int)(from.mode))));
            return target;
        }
        
        public static object Microsoft_Robotics_RoboChamps_MarsChallenger_StereoVision_Proxy_StereoVisionState_TO_Microsoft_Robotics_RoboChamps_MarsChallenger_StereoVision_StereoVisionState(object transformFrom) {
            global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.StereoVisionState target = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.StereoVisionState();
            global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.StereoVisionState from = ((global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.StereoVisionState)(transformFrom));
            target.LastPanProcessing = from.LastPanProcessing;
            target.LastNavProcessing = from.LastNavProcessing;
            target.SearchFor = ((global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Search)(((int)(from.SearchFor))));
            return target;
        }
        
        public static object Microsoft_Robotics_RoboChamps_MarsChallenger_StereoVision_StereoVisionState_TO_Microsoft_Robotics_RoboChamps_MarsChallenger_StereoVision_Proxy_StereoVisionState(object transformFrom) {
            global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.StereoVisionState target = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.StereoVisionState();
            global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.StereoVisionState from = ((global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.StereoVisionState)(transformFrom));
            target.LastPanProcessing = from.LastPanProcessing;
            target.LastNavProcessing = from.LastNavProcessing;
            target.SearchFor = ((global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.Search)(((int)(from.SearchFor))));
            return target;
        }
        
        public static object Microsoft_Robotics_RoboChamps_MarsChallenger_Proxy_MarsChallengerState_TO_Microsoft_Robotics_RoboChamps_MarsChallenger_MarsChallengerState(object transformFrom) {
            global::Microsoft.Robotics.RoboChamps.MarsChallenger.MarsChallengerState target = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.MarsChallengerState();
            global::Microsoft.Robotics.RoboChamps.MarsChallenger.Proxy.MarsChallengerState from = ((global::Microsoft.Robotics.RoboChamps.MarsChallenger.Proxy.MarsChallengerState)(transformFrom));
            target.State = ((global::Microsoft.Robotics.RoboChamps.MarsChallenger.RoverState)(((int)(from.State))));
            if ((from.SpectrometerData != null)) {
                global::Microsoft.Robotics.RoboChamps.MarsSpectrometer.Proxy.MarsSpectrometerState tmp = new global::Microsoft.Robotics.RoboChamps.MarsSpectrometer.Proxy.MarsSpectrometerState();
                ((Microsoft.Dss.Core.IDssSerializable)(from.SpectrometerData)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp)));
                target.SpectrometerData = tmp;
            }
            else {
                target.SpectrometerData = null;
            }
            if ((from.FrontCamData != null)) {
                target.FrontCamData = ((global::Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.ImageResult)(Microsoft_Robotics_RoboChamps_MarsChallenger_ImageProcessing_Proxy_ImageResult_TO_Microsoft_Robotics_RoboChamps_MarsChallenger_ImageProcessing_ImageResult(from.FrontCamData)));
            }
            else {
                target.FrontCamData = null;
            }
            if ((from.RearCamData != null)) {
                target.RearCamData = ((global::Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.ImageResult)(Microsoft_Robotics_RoboChamps_MarsChallenger_ImageProcessing_Proxy_ImageResult_TO_Microsoft_Robotics_RoboChamps_MarsChallenger_ImageProcessing_ImageResult(from.RearCamData)));
            }
            else {
                target.RearCamData = null;
            }
            if ((from.DriveState != null)) {
                target.DriveState = ((global::Microsoft.Robotics.RoboChamps.MarsChallenger.DriveState)(Microsoft_Robotics_RoboChamps_MarsChallenger_Proxy_DriveState_TO_Microsoft_Robotics_RoboChamps_MarsChallenger_DriveState(from.DriveState)));
            }
            else {
                target.DriveState = null;
            }
            if ((from.HeadState != null)) {
                target.HeadState = ((global::Microsoft.Robotics.RoboChamps.MarsChallenger.HeadState)(Microsoft_Robotics_RoboChamps_MarsChallenger_Proxy_HeadState_TO_Microsoft_Robotics_RoboChamps_MarsChallenger_HeadState(from.HeadState)));
            }
            else {
                target.HeadState = null;
            }
            target.BeginAt = from.BeginAt;
            if ((from.SI != null)) {
                target.SI = ((global::Microsoft.Robotics.RoboChamps.MarsChallenger.SensorInterval)(Microsoft_Robotics_RoboChamps_MarsChallenger_Proxy_SensorInterval_TO_Microsoft_Robotics_RoboChamps_MarsChallenger_SensorInterval(from.SI)));
            }
            else {
                target.SI = null;
            }
            if ((from.current_M != null)) {
                target.current_M = ((global::Microsoft.Robotics.RoboChamps.MarsChallenger.Mission)(Microsoft_Robotics_RoboChamps_MarsChallenger_Proxy_Mission_TO_Microsoft_Robotics_RoboChamps_MarsChallenger_Mission(from.current_M)));
            }
            else {
                target.current_M = null;
            }
            return target;
        }
        
        public static object Microsoft_Robotics_RoboChamps_MarsChallenger_MarsChallengerState_TO_Microsoft_Robotics_RoboChamps_MarsChallenger_Proxy_MarsChallengerState(object transformFrom) {
            global::Microsoft.Robotics.RoboChamps.MarsChallenger.Proxy.MarsChallengerState target = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.Proxy.MarsChallengerState();
            global::Microsoft.Robotics.RoboChamps.MarsChallenger.MarsChallengerState from = ((global::Microsoft.Robotics.RoboChamps.MarsChallenger.MarsChallengerState)(transformFrom));
            target.State = ((global::Microsoft.Robotics.RoboChamps.MarsChallenger.Proxy.RoverState)(((int)(from.State))));
            global::Microsoft.Robotics.RoboChamps.MarsSpectrometer.Proxy.MarsSpectrometerState tmp = from.SpectrometerData;
            if ((tmp != null)) {
                global::Microsoft.Robotics.RoboChamps.MarsSpectrometer.Proxy.MarsSpectrometerState tmp0 = new global::Microsoft.Robotics.RoboChamps.MarsSpectrometer.Proxy.MarsSpectrometerState();
                ((Microsoft.Dss.Core.IDssSerializable)(tmp)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp0)));
                target.SpectrometerData = tmp0;
            }
            global::Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.ImageResult tmp1 = from.FrontCamData;
            if ((tmp1 != null)) {
                target.FrontCamData = ((global::Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.Proxy.ImageResult)(Microsoft_Robotics_RoboChamps_MarsChallenger_ImageProcessing_ImageResult_TO_Microsoft_Robotics_RoboChamps_MarsChallenger_ImageProcessing_Proxy_ImageResult(tmp1)));
            }
            global::Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.ImageResult tmp2 = from.RearCamData;
            if ((tmp2 != null)) {
                target.RearCamData = ((global::Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.Proxy.ImageResult)(Microsoft_Robotics_RoboChamps_MarsChallenger_ImageProcessing_ImageResult_TO_Microsoft_Robotics_RoboChamps_MarsChallenger_ImageProcessing_Proxy_ImageResult(tmp2)));
            }
            global::Microsoft.Robotics.RoboChamps.MarsChallenger.DriveState tmp3 = from.DriveState;
            if ((tmp3 != null)) {
                target.DriveState = ((global::Microsoft.Robotics.RoboChamps.MarsChallenger.Proxy.DriveState)(Microsoft_Robotics_RoboChamps_MarsChallenger_DriveState_TO_Microsoft_Robotics_RoboChamps_MarsChallenger_Proxy_DriveState(tmp3)));
            }
            global::Microsoft.Robotics.RoboChamps.MarsChallenger.HeadState tmp4 = from.HeadState;
            if ((tmp4 != null)) {
                target.HeadState = ((global::Microsoft.Robotics.RoboChamps.MarsChallenger.Proxy.HeadState)(Microsoft_Robotics_RoboChamps_MarsChallenger_HeadState_TO_Microsoft_Robotics_RoboChamps_MarsChallenger_Proxy_HeadState(tmp4)));
            }
            target.BeginAt = from.BeginAt;
            global::Microsoft.Robotics.RoboChamps.MarsChallenger.SensorInterval tmp5 = from.SI;
            if ((tmp5 != null)) {
                target.SI = ((global::Microsoft.Robotics.RoboChamps.MarsChallenger.Proxy.SensorInterval)(Microsoft_Robotics_RoboChamps_MarsChallenger_SensorInterval_TO_Microsoft_Robotics_RoboChamps_MarsChallenger_Proxy_SensorInterval(tmp5)));
            }
            global::Microsoft.Robotics.RoboChamps.MarsChallenger.Mission tmp6 = from.current_M;
            if ((tmp6 != null)) {
                target.current_M = ((global::Microsoft.Robotics.RoboChamps.MarsChallenger.Proxy.Mission)(Microsoft_Robotics_RoboChamps_MarsChallenger_Mission_TO_Microsoft_Robotics_RoboChamps_MarsChallenger_Proxy_Mission(tmp6)));
            }
            return target;
        }
        
        public static object Microsoft_Robotics_RoboChamps_MarsChallenger_ImageProcessing_Proxy_ImageResult_TO_Microsoft_Robotics_RoboChamps_MarsChallenger_ImageProcessing_ImageResult(object transformFrom) {
            global::Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.ImageResult target = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.ImageResult();
            global::Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.Proxy.ImageResult from = ((global::Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.Proxy.ImageResult)(transformFrom));
            target.Timestamp = from.Timestamp;
            if ((from.Avoid != null)) {
                int count = from.Avoid.Length;
                global::Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.target[] tmp = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.target[count];
                for (int index = 0; (index < count); index = (index + 1)) {
                    global::Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.target tmp0 = default(global::Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.target);
                    if ((from.Avoid[index] != null)) {
                        tmp0 = ((global::Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.target)(Microsoft_Robotics_RoboChamps_MarsChallenger_ImageProcessing_Proxy_target_TO_Microsoft_Robotics_RoboChamps_MarsChallenger_ImageProcessing_target(from.Avoid[index])));
                    }
                    else {
                        tmp0 = null;
                    }
                    tmp[index] = tmp0;
                }
                target.Avoid = tmp;
            }
            else {
                target.Avoid = null;
            }
            if ((from.Edge != null)) {
                int count0 = from.Edge.Length;
                int[] tmp1 = new int[count0];
                global::System.Buffer.BlockCopy(from.Edge, 0, tmp1, 0, global::System.Buffer.ByteLength(from.Edge));
                target.Edge = tmp1;
            }
            else {
                target.Edge = null;
            }
            return target;
        }
        
        public static object Microsoft_Robotics_RoboChamps_MarsChallenger_ImageProcessing_ImageResult_TO_Microsoft_Robotics_RoboChamps_MarsChallenger_ImageProcessing_Proxy_ImageResult(object transformFrom) {
            global::Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.Proxy.ImageResult target = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.Proxy.ImageResult();
            global::Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.ImageResult from = ((global::Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.ImageResult)(transformFrom));
            target.Timestamp = from.Timestamp;
            Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.target[] tmp = from.Avoid;
            if ((tmp != null)) {
                int count = tmp.Length;
                global::Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.Proxy.target[] tmp0 = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.Proxy.target[count];
                for (int index = 0; (index < count); index = (index + 1)) {
                    global::Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.Proxy.target tmp1 = default(global::Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.Proxy.target);
                    global::Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.target tmp2 = tmp[index];
                    if ((tmp2 != null)) {
                        tmp1 = ((global::Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.Proxy.target)(Microsoft_Robotics_RoboChamps_MarsChallenger_ImageProcessing_target_TO_Microsoft_Robotics_RoboChamps_MarsChallenger_ImageProcessing_Proxy_target(tmp2)));
                    }
                    tmp0[index] = tmp1;
                }
                target.Avoid = tmp0;
            }
            int[] tmp3 = from.Edge;
            if ((tmp3 != null)) {
                int count0 = tmp3.Length;
                int[] tmp4 = new int[count0];
                global::System.Buffer.BlockCopy(tmp3, 0, tmp4, 0, global::System.Buffer.ByteLength(tmp3));
                target.Edge = tmp4;
            }
            return target;
        }
        
        public static object Microsoft_Robotics_RoboChamps_MarsChallenger_ImageProcessing_Proxy_target_TO_Microsoft_Robotics_RoboChamps_MarsChallenger_ImageProcessing_target(object transformFrom) {
            global::Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.target target = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.target();
            global::Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.Proxy.target from = ((global::Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.Proxy.target)(transformFrom));
            target.x = from.x;
            target.y = from.y;
            target.max_x = from.max_x;
            target.max_y = from.max_y;
            target.min_x = from.min_x;
            target.min_y = from.min_y;
            target.tan_left = from.tan_left;
            target.tan_right = from.tan_right;
            return target;
        }
        
        public static object Microsoft_Robotics_RoboChamps_MarsChallenger_ImageProcessing_target_TO_Microsoft_Robotics_RoboChamps_MarsChallenger_ImageProcessing_Proxy_target(object transformFrom) {
            global::Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.Proxy.target target = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.Proxy.target();
            global::Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.target from = ((global::Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.target)(transformFrom));
            target.x = from.x;
            target.y = from.y;
            target.max_x = from.max_x;
            target.max_y = from.max_y;
            target.min_x = from.min_x;
            target.min_y = from.min_y;
            target.tan_left = from.tan_left;
            target.tan_right = from.tan_right;
            return target;
        }
        
        private static global::Microsoft.Robotics.RoboChamps.MarsChallenger.Proxy.DriveState _cachedInstance0 = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.Proxy.DriveState();
        
        private static global::Microsoft.Robotics.RoboChamps.MarsChallenger.DriveState _cachedInstance = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.DriveState();
        
        public static object Microsoft_Robotics_RoboChamps_MarsChallenger_Proxy_DriveState_TO_Microsoft_Robotics_RoboChamps_MarsChallenger_DriveState(object transformFrom) {
            return _cachedInstance;
        }
        
        public static object Microsoft_Robotics_RoboChamps_MarsChallenger_DriveState_TO_Microsoft_Robotics_RoboChamps_MarsChallenger_Proxy_DriveState(object transformFrom) {
            return _cachedInstance0;
        }
        
        private static global::Microsoft.Robotics.RoboChamps.MarsChallenger.Proxy.HeadState _cachedInstance2 = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.Proxy.HeadState();
        
        private static global::Microsoft.Robotics.RoboChamps.MarsChallenger.HeadState _cachedInstance1 = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.HeadState();
        
        public static object Microsoft_Robotics_RoboChamps_MarsChallenger_Proxy_HeadState_TO_Microsoft_Robotics_RoboChamps_MarsChallenger_HeadState(object transformFrom) {
            return _cachedInstance1;
        }
        
        public static object Microsoft_Robotics_RoboChamps_MarsChallenger_HeadState_TO_Microsoft_Robotics_RoboChamps_MarsChallenger_Proxy_HeadState(object transformFrom) {
            return _cachedInstance2;
        }
        
        private static global::Microsoft.Robotics.RoboChamps.MarsChallenger.Proxy.SensorInterval _cachedInstance4 = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.Proxy.SensorInterval();
        
        private static global::Microsoft.Robotics.RoboChamps.MarsChallenger.SensorInterval _cachedInstance3 = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.SensorInterval();
        
        public static object Microsoft_Robotics_RoboChamps_MarsChallenger_Proxy_SensorInterval_TO_Microsoft_Robotics_RoboChamps_MarsChallenger_SensorInterval(object transformFrom) {
            return _cachedInstance3;
        }
        
        public static object Microsoft_Robotics_RoboChamps_MarsChallenger_SensorInterval_TO_Microsoft_Robotics_RoboChamps_MarsChallenger_Proxy_SensorInterval(object transformFrom) {
            return _cachedInstance4;
        }
        
        private static global::Microsoft.Robotics.RoboChamps.MarsChallenger.Proxy.Mission _cachedInstance6 = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.Proxy.Mission();
        
        private static global::Microsoft.Robotics.RoboChamps.MarsChallenger.Mission _cachedInstance5 = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.Mission();
        
        public static object Microsoft_Robotics_RoboChamps_MarsChallenger_Proxy_Mission_TO_Microsoft_Robotics_RoboChamps_MarsChallenger_Mission(object transformFrom) {
            return _cachedInstance5;
        }
        
        public static object Microsoft_Robotics_RoboChamps_MarsChallenger_Mission_TO_Microsoft_Robotics_RoboChamps_MarsChallenger_Proxy_Mission(object transformFrom) {
            return _cachedInstance6;
        }
        
        private static global::Microsoft.Robotics.RoboChamps.MarsChallenger.Proxy.InitializeRequest _cachedInstance8 = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.Proxy.InitializeRequest();
        
        private static global::Microsoft.Robotics.RoboChamps.MarsChallenger.InitializeRequest _cachedInstance7 = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.InitializeRequest();
        
        public static object Microsoft_Robotics_RoboChamps_MarsChallenger_Proxy_InitializeRequest_TO_Microsoft_Robotics_RoboChamps_MarsChallenger_InitializeRequest(object transformFrom) {
            return _cachedInstance7;
        }
        
        public static object Microsoft_Robotics_RoboChamps_MarsChallenger_InitializeRequest_TO_Microsoft_Robotics_RoboChamps_MarsChallenger_Proxy_InitializeRequest(object transformFrom) {
            return _cachedInstance8;
        }
        
        public static object Microsoft_Robotics_RoboChamps_MarsChallenger_ImageProcessing_Proxy_ImageProcessingState_TO_Microsoft_Robotics_RoboChamps_MarsChallenger_ImageProcessing_ImageProcessingState(object transformFrom) {
            global::Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.ImageProcessingState target = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.ImageProcessingState();
            global::Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.Proxy.ImageProcessingState from = ((global::Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.Proxy.ImageProcessingState)(transformFrom));
            target.LastProcessing = from.LastProcessing;
            return target;
        }
        
        public static object Microsoft_Robotics_RoboChamps_MarsChallenger_ImageProcessing_ImageProcessingState_TO_Microsoft_Robotics_RoboChamps_MarsChallenger_ImageProcessing_Proxy_ImageProcessingState(object transformFrom) {
            global::Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.Proxy.ImageProcessingState target = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.Proxy.ImageProcessingState();
            global::Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.ImageProcessingState from = ((global::Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.ImageProcessingState)(transformFrom));
            target.LastProcessing = from.LastProcessing;
            return target;
        }
    }
}
