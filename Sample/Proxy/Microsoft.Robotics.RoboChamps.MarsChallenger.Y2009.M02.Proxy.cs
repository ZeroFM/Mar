//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:2.0.50727.3074
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Reflection.AssemblyVersionAttribute("1.0.0.0")]
[assembly: global::Microsoft.Dss.Core.Attributes.ServiceDeclarationAttribute(global::Microsoft.Dss.Core.Attributes.DssServiceDeclaration.Proxy, SourceAssemblyKey="Microsoft.Robotics.RoboChamps.MarsChallenger.Y2009.M02, Version=1.0.0.0, Culture=" +
    "neutral, PublicKeyToken=341fb87eeeef4866")]
[assembly: global::System.Security.SecurityTransparentAttribute()]
[assembly: global::System.Security.AllowPartiallyTrustedCallersAttribute()]

namespace Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy {
    
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://www.robochamps.com/2009/02/marschallenger/stereovision.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.robochamps.com/2009/02/marschallenger/stereovision.html", ElementName="VisionResult")]
    public class VisionResult : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public VisionResult() {
        }
        
        private Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.Rock[] _Rocks;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.Rock[] Rocks {
            get {
                return this._Rocks;
            }
            set {
                this._Rocks = value;
            }
        }
        
        private int _Center_x;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public int Center_x {
            get {
                return this._Center_x;
            }
            set {
                this._Center_x = value;
            }
        }
        
        private int _Center_y;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public int Center_y {
            get {
                return this._Center_y;
            }
            set {
                this._Center_y = value;
            }
        }
        
        private Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.Blob[] _PanBlobs;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.Blob[] PanBlobs {
            get {
                return this._PanBlobs;
            }
            set {
                this._PanBlobs = value;
            }
        }
        
        private Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.Blob[] _NavBlobs;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.Blob[] NavBlobs {
            get {
                return this._NavBlobs;
            }
            set {
                this._NavBlobs = value;
            }
        }
        
        private global::System.DateTime _TimeStamp;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public global::System.DateTime TimeStamp {
            get {
                return this._TimeStamp;
            }
            set {
                this._TimeStamp = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current VisionResult to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.VisionResult typedTarget = ((global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.VisionResult)(target));
            if ((this._Rocks != null)) {
                int count = this._Rocks.Length;
                global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.Rock[] tmp = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.Rock[count];
                for (int index = 0; (index < count); index = (index + 1)) {
                    global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.Rock tmp0 = default(global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.Rock);
                    if ((this._Rocks[index] != null)) {
                        global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.Rock tmp1 = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.Rock();
                        ((Microsoft.Dss.Core.IDssSerializable)(this._Rocks[index])).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp1)));
                        tmp0 = tmp1;
                    }
                    tmp[index] = tmp0;
                }
                typedTarget._Rocks = tmp;
            }
            typedTarget._Center_x = this._Center_x;
            typedTarget._Center_y = this._Center_y;
            if ((this._PanBlobs != null)) {
                int count0 = this._PanBlobs.Length;
                global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.Blob[] tmp2 = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.Blob[count0];
                for (int index0 = 0; (index0 < count0); index0 = (index0 + 1)) {
                    global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.Blob tmp3 = default(global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.Blob);
                    if ((this._PanBlobs[index0] != null)) {
                        global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.Blob tmp4 = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.Blob();
                        ((Microsoft.Dss.Core.IDssSerializable)(this._PanBlobs[index0])).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp4)));
                        tmp3 = tmp4;
                    }
                    tmp2[index0] = tmp3;
                }
                typedTarget._PanBlobs = tmp2;
            }
            if ((this._NavBlobs != null)) {
                int count1 = this._NavBlobs.Length;
                global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.Blob[] tmp5 = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.Blob[count1];
                for (int index1 = 0; (index1 < count1); index1 = (index1 + 1)) {
                    global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.Blob tmp6 = default(global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.Blob);
                    if ((this._NavBlobs[index1] != null)) {
                        global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.Blob tmp7 = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.Blob();
                        ((Microsoft.Dss.Core.IDssSerializable)(this._NavBlobs[index1])).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp7)));
                        tmp6 = tmp7;
                    }
                    tmp5[index1] = tmp6;
                }
                typedTarget._NavBlobs = tmp5;
            }
            typedTarget._TimeStamp = this._TimeStamp;
        }
        
        /// <summary>
        ///Clones VisionResult
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.VisionResult target0 = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.VisionResult();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current VisionResult to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._Rocks == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(1);
                writer.Write(this._Rocks.Length);
                for (int indexRocks = 0; (indexRocks < this._Rocks.Length); indexRocks = (indexRocks + 1)) {
                    if ((this._Rocks[indexRocks] == null)) {
                        writer.Write(((byte)(0)));
                    }
                    else {
                        writer.Write(((byte)(1)));
                        ((Microsoft.Dss.Core.IDssSerializable)(this._Rocks[indexRocks])).Serialize(writer);
                    }
                }
            }
            writer.Write(this._Center_x);
            writer.Write(this._Center_y);
            if ((this._PanBlobs == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(1);
                writer.Write(this._PanBlobs.Length);
                for (int indexPanBlobs = 0; (indexPanBlobs < this._PanBlobs.Length); indexPanBlobs = (indexPanBlobs + 1)) {
                    if ((this._PanBlobs[indexPanBlobs] == null)) {
                        writer.Write(((byte)(0)));
                    }
                    else {
                        writer.Write(((byte)(1)));
                        ((Microsoft.Dss.Core.IDssSerializable)(this._PanBlobs[indexPanBlobs])).Serialize(writer);
                    }
                }
            }
            if ((this._NavBlobs == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(1);
                writer.Write(this._NavBlobs.Length);
                for (int indexNavBlobs = 0; (indexNavBlobs < this._NavBlobs.Length); indexNavBlobs = (indexNavBlobs + 1)) {
                    if ((this._NavBlobs[indexNavBlobs] == null)) {
                        writer.Write(((byte)(0)));
                    }
                    else {
                        writer.Write(((byte)(1)));
                        ((Microsoft.Dss.Core.IDssSerializable)(this._NavBlobs[indexNavBlobs])).Serialize(writer);
                    }
                }
            }
            global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.SerializeDateTime(this._TimeStamp, writer);
        }
        
        /// <summary>
        ///Deserializes VisionResult
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized VisionResult</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                int tmp8 = reader.ReadInt32();
                int count2 = reader.ReadInt32();
                this._Rocks = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.Rock[count2];
                for (int index2 = 0; (index2 < count2); index2 = (index2 + 1)) {
                    if ((reader.ReadByte() != 0)) {
                        this._Rocks[index2] = ((global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.Rock)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.Rock())).Deserialize(reader)));
                    }
                }
            }
            this._Center_x = reader.ReadInt32();
            this._Center_y = reader.ReadInt32();
            if ((reader.ReadByte() != 0)) {
                int tmp9 = reader.ReadInt32();
                int count3 = reader.ReadInt32();
                this._PanBlobs = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.Blob[count3];
                for (int index3 = 0; (index3 < count3); index3 = (index3 + 1)) {
                    if ((reader.ReadByte() != 0)) {
                        this._PanBlobs[index3] = ((global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.Blob)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.Blob())).Deserialize(reader)));
                    }
                }
            }
            if ((reader.ReadByte() != 0)) {
                int tmp10 = reader.ReadInt32();
                int count4 = reader.ReadInt32();
                this._NavBlobs = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.Blob[count4];
                for (int index4 = 0; (index4 < count4); index4 = (index4 + 1)) {
                    if ((reader.ReadByte() != 0)) {
                        this._NavBlobs[index4] = ((global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.Blob)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.Blob())).Deserialize(reader)));
                    }
                }
            }
            this._TimeStamp = global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.DeserializeDateTime(reader);
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://www.robochamps.com/2009/02/marschallenger/stereovision.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.robochamps.com/2009/02/marschallenger/stereovision.html", ElementName="Rock")]
    public class Rock : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public Rock() {
        }
        
        private double _X;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public double X {
            get {
                return this._X;
            }
            set {
                this._X = value;
            }
        }
        
        private double _Y;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public double Y {
            get {
                return this._Y;
            }
            set {
                this._Y = value;
            }
        }
        
        private double _Z;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public double Z {
            get {
                return this._Z;
            }
            set {
                this._Z = value;
            }
        }
        
        private double _Score;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public double Score {
            get {
                return this._Score;
            }
            set {
                this._Score = value;
            }
        }
        
        private int _PanBlob_num;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public int PanBlob_num {
            get {
                return this._PanBlob_num;
            }
            set {
                this._PanBlob_num = value;
            }
        }
        
        private int _NavBlob_num;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public int NavBlob_num {
            get {
                return this._NavBlob_num;
            }
            set {
                this._NavBlob_num = value;
            }
        }
        
        private global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.RockType _Type;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.RockType Type {
            get {
                return this._Type;
            }
            set {
                this._Type = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current Rock to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.Rock typedTarget = ((global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.Rock)(target));
            typedTarget._X = this._X;
            typedTarget._Y = this._Y;
            typedTarget._Z = this._Z;
            typedTarget._Score = this._Score;
            typedTarget._PanBlob_num = this._PanBlob_num;
            typedTarget._NavBlob_num = this._NavBlob_num;
            typedTarget._Type = this._Type;
        }
        
        /// <summary>
        ///Clones Rock
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.Rock target0 = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.Rock();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current Rock to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._X);
            writer.Write(this._Y);
            writer.Write(this._Z);
            writer.Write(this._Score);
            writer.Write(this._PanBlob_num);
            writer.Write(this._NavBlob_num);
            writer.Write(((int)(this._Type)));
        }
        
        /// <summary>
        ///Deserializes Rock
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized Rock</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._X = reader.ReadDouble();
            this._Y = reader.ReadDouble();
            this._Z = reader.ReadDouble();
            this._Score = reader.ReadDouble();
            this._PanBlob_num = reader.ReadInt32();
            this._NavBlob_num = reader.ReadInt32();
            this._Type = ((global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.RockType)(reader.ReadInt32()));
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://www.robochamps.com/2009/02/marschallenger/stereovision.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.robochamps.com/2009/02/marschallenger/stereovision.html", ElementName="Blob")]
    public class Blob : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public Blob() {
        }
        
        private int _x;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public int x {
            get {
                return this._x;
            }
            set {
                this._x = value;
            }
        }
        
        private int _y;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public int y {
            get {
                return this._y;
            }
            set {
                this._y = value;
            }
        }
        
        private int _max_x;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public int max_x {
            get {
                return this._max_x;
            }
            set {
                this._max_x = value;
            }
        }
        
        private int _max_y;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public int max_y {
            get {
                return this._max_y;
            }
            set {
                this._max_y = value;
            }
        }
        
        private int _min_x;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public int min_x {
            get {
                return this._min_x;
            }
            set {
                this._min_x = value;
            }
        }
        
        private int _min_y;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public int min_y {
            get {
                return this._min_y;
            }
            set {
                this._min_y = value;
            }
        }
        
        private int _sum_R;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public int sum_R {
            get {
                return this._sum_R;
            }
            set {
                this._sum_R = value;
            }
        }
        
        private int _sum_B;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public int sum_B {
            get {
                return this._sum_B;
            }
            set {
                this._sum_B = value;
            }
        }
        
        private int _sum_G;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public int sum_G {
            get {
                return this._sum_G;
            }
            set {
                this._sum_G = value;
            }
        }
        
        private int _pexel_num;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public int pexel_num {
            get {
                return this._pexel_num;
            }
            set {
                this._pexel_num = value;
            }
        }
        
        private double _Rock_Pro;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public double Rock_Pro {
            get {
                return this._Rock_Pro;
            }
            set {
                this._Rock_Pro = value;
            }
        }
        
        private double _Shield_Pro;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public double Shield_Pro {
            get {
                return this._Shield_Pro;
            }
            set {
                this._Shield_Pro = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current Blob to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.Blob typedTarget = ((global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.Blob)(target));
            typedTarget._x = this._x;
            typedTarget._y = this._y;
            typedTarget._max_x = this._max_x;
            typedTarget._max_y = this._max_y;
            typedTarget._min_x = this._min_x;
            typedTarget._min_y = this._min_y;
            typedTarget._sum_R = this._sum_R;
            typedTarget._sum_B = this._sum_B;
            typedTarget._sum_G = this._sum_G;
            typedTarget._pexel_num = this._pexel_num;
            typedTarget._Rock_Pro = this._Rock_Pro;
            typedTarget._Shield_Pro = this._Shield_Pro;
        }
        
        /// <summary>
        ///Clones Blob
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.Blob target0 = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.Blob();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current Blob to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._x);
            writer.Write(this._y);
            writer.Write(this._max_x);
            writer.Write(this._max_y);
            writer.Write(this._min_x);
            writer.Write(this._min_y);
            writer.Write(this._sum_R);
            writer.Write(this._sum_B);
            writer.Write(this._sum_G);
            writer.Write(this._pexel_num);
            writer.Write(this._Rock_Pro);
            writer.Write(this._Shield_Pro);
        }
        
        /// <summary>
        ///Deserializes Blob
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized Blob</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._x = reader.ReadInt32();
            this._y = reader.ReadInt32();
            this._max_x = reader.ReadInt32();
            this._max_y = reader.ReadInt32();
            this._min_x = reader.ReadInt32();
            this._min_y = reader.ReadInt32();
            this._sum_R = reader.ReadInt32();
            this._sum_B = reader.ReadInt32();
            this._sum_G = reader.ReadInt32();
            this._pexel_num = reader.ReadInt32();
            this._Rock_Pro = reader.ReadDouble();
            this._Shield_Pro = reader.ReadDouble();
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://www.robochamps.com/2009/02/marschallenger/stereovision.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.robochamps.com/2009/02/marschallenger/stereovision.html", ElementName="Mode")]
    public class Mode : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public Mode() {
        }
        
        private global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.Search _mode;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.Search mode {
            get {
                return this._mode;
            }
            set {
                this._mode = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current Mode to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.Mode typedTarget = ((global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.Mode)(target));
            typedTarget._mode = this._mode;
        }
        
        /// <summary>
        ///Clones Mode
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.Mode target0 = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.Mode();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current Mode to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(((int)(this._mode)));
        }
        
        /// <summary>
        ///Deserializes Mode
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized Mode</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._mode = ((global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.Search)(reader.ReadInt32()));
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://www.robochamps.com/2009/02/marschallenger/stereovision.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.robochamps.com/2009/02/marschallenger/stereovision.html", ElementName="StereoVisionState")]
    public class StereoVisionState : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public StereoVisionState() {
        }
        
        private global::System.DateTime _LastPanProcessing;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public global::System.DateTime LastPanProcessing {
            get {
                return this._LastPanProcessing;
            }
            set {
                this._LastPanProcessing = value;
            }
        }
        
        private global::System.DateTime _LastNavProcessing;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public global::System.DateTime LastNavProcessing {
            get {
                return this._LastNavProcessing;
            }
            set {
                this._LastNavProcessing = value;
            }
        }
        
        private global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.Search _SearchFor;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.Search SearchFor {
            get {
                return this._SearchFor;
            }
            set {
                this._SearchFor = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current StereoVisionState to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.StereoVisionState typedTarget = ((global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.StereoVisionState)(target));
            typedTarget._LastPanProcessing = this._LastPanProcessing;
            typedTarget._LastNavProcessing = this._LastNavProcessing;
            typedTarget._SearchFor = this._SearchFor;
        }
        
        /// <summary>
        ///Clones StereoVisionState
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.StereoVisionState target0 = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.StereoVisionState();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current StereoVisionState to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.SerializeDateTime(this._LastPanProcessing, writer);
            global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.SerializeDateTime(this._LastNavProcessing, writer);
            writer.Write(((int)(this._SearchFor)));
        }
        
        /// <summary>
        ///Deserializes StereoVisionState
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized StereoVisionState</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._LastPanProcessing = global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.DeserializeDateTime(reader);
            this._LastNavProcessing = global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.DeserializeDateTime(reader);
            this._SearchFor = ((global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.Search)(reader.ReadInt32()));
            return this;
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Subscribe : global::Microsoft.Dss.ServiceModel.Dssp.Subscribe<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault>> {
        
        public Subscribe() {
        }
        
        public Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body) : 
                base(body) {
        }
        
        public Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class ProcessVision : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.VisionResult, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault>> {
        
        public ProcessVision() {
        }
        
        public ProcessVision(global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.VisionResult body) : 
                base(body) {
        }
        
        public ProcessVision(global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.VisionResult body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class ModeChange : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.Mode, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault>> {
        
        public ModeChange() {
        }
        
        public ModeChange(global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.Mode body) : 
                base(body) {
        }
        
        public ModeChange(global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.Mode body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class StereoVisionOperations : global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup, global:: Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop, global:: Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.Subscribe, global:: Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.ProcessVision, global:: Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.ModeChange> {
        
        public StereoVisionOperations() {
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup() {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop() {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault> Subscribe(global::Microsoft.Ccr.Core.IPort notificationPort, params System.Type[] types) {
            global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.Subscribe operation = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Subscribe(global::Microsoft.Ccr.Core.IPort notificationPort, out global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.Subscribe operation, params System.Type[] types) {
            global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            operation = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault> Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.IPort notificationPort, params System.Type[] types) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            }
            global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.Subscribe operation = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.IPort notificationPort, out global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.Subscribe operation, params System.Type[] types) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            }
            operation = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> ProcessVision() {
            global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.VisionResult body = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.VisionResult();
            global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.ProcessVision operation = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.ProcessVision(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice ProcessVision(out global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.ProcessVision operation) {
            global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.VisionResult body = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.VisionResult();
            operation = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.ProcessVision(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> ProcessVision(global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.VisionResult body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.VisionResult();
            }
            global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.ProcessVision operation = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.ProcessVision(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice ProcessVision(global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.VisionResult body, out global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.ProcessVision operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.VisionResult();
            }
            operation = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.ProcessVision(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> ModeChange() {
            global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.Mode body = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.Mode();
            global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.ModeChange operation = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.ModeChange(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice ModeChange(out global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.ModeChange operation) {
            global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.Mode body = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.Mode();
            operation = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.ModeChange(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> ModeChange(global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.Mode body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.Mode();
            }
            global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.ModeChange operation = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.ModeChange(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice ModeChange(global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.Mode body, out global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.ModeChange operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.Mode();
            }
            operation = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.ModeChange(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://www.robochamps.com/2009/02/marschallenger/stereovision.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.robochamps.com/2009/02/marschallenger/stereovision.html", ElementName="RockType")]
    public enum RockType : int {
        
        Rock = 0,
        
        Shield = 1,
        
        Edge = 2,
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://www.robochamps.com/2009/02/marschallenger/stereovision.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.robochamps.com/2009/02/marschallenger/stereovision.html", ElementName="Search")]
    public enum Search : int {
        
        rock = 0,
        
        edge = 1,
        
        shield = 2,
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    [global::System.ComponentModel.DescriptionAttribute("The Mars Challenger StereoVision Processing Service")]
    [global::System.ComponentModel.DisplayNameAttribute("Mars StereoVision Processor")]
    public class Contract {
        
        public const string Identifier = "http://www.robochamps.com/2009/02/marschallenger/stereovision.html";
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="service">service path</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, string service, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://www.robochamps.com/2009/02/marschallenger/stereovision.html", service);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://www.robochamps.com/2009/02/marschallenger/stereovision.html", null);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
    }
    
    public class CombinedOperationsPort : global::Microsoft.Dss.Core.DssCombinedOperationsPort {
        
        public CombinedOperationsPort() {
            this.StereoVisionOperations = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.StereoVisionOperations();
            base.Initialize(new global::Microsoft.Dss.Core.DssOperationsPortMetadata(this.StereoVisionOperations, "http://www.robochamps.com/2009/02/marschallenger/stereovision.html", "StereoVisionOperations", ""));
        }
        
        public global::Microsoft.Robotics.RoboChamps.MarsChallenger.StereoVision.Proxy.StereoVisionOperations StereoVisionOperations;
    }
}
namespace Microsoft.Robotics.RoboChamps.MarsChallenger.Proxy {
    
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://www.robochamps.com/2009/02/marschallenger.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.robochamps.com/2009/02/marschallenger.html", ElementName="MarsChallengerState")]
    public class MarsChallengerState : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public MarsChallengerState() {
        }
        
        private global::Microsoft.Robotics.RoboChamps.MarsChallenger.Proxy.RoverState _State;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public global::Microsoft.Robotics.RoboChamps.MarsChallenger.Proxy.RoverState State {
            get {
                return this._State;
            }
            set {
                this._State = value;
            }
        }
        
        private global::Microsoft.Robotics.RoboChamps.MarsSpectrometer.Proxy.MarsSpectrometerState _SpectrometerData;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public global::Microsoft.Robotics.RoboChamps.MarsSpectrometer.Proxy.MarsSpectrometerState SpectrometerData {
            get {
                return this._SpectrometerData;
            }
            set {
                this._SpectrometerData = value;
            }
        }
        
        private global::Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.Proxy.ImageResult _FrontCamData;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public global::Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.Proxy.ImageResult FrontCamData {
            get {
                return this._FrontCamData;
            }
            set {
                this._FrontCamData = value;
            }
        }
        
        private global::Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.Proxy.ImageResult _RearCamData;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public global::Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.Proxy.ImageResult RearCamData {
            get {
                return this._RearCamData;
            }
            set {
                this._RearCamData = value;
            }
        }
        
        private global::Microsoft.Robotics.RoboChamps.MarsChallenger.Proxy.DriveState _DriveState;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public global::Microsoft.Robotics.RoboChamps.MarsChallenger.Proxy.DriveState DriveState {
            get {
                return this._DriveState;
            }
            set {
                this._DriveState = value;
            }
        }
        
        private global::Microsoft.Robotics.RoboChamps.MarsChallenger.Proxy.HeadState _HeadState;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public global::Microsoft.Robotics.RoboChamps.MarsChallenger.Proxy.HeadState HeadState {
            get {
                return this._HeadState;
            }
            set {
                this._HeadState = value;
            }
        }
        
        private global::System.DateTime _BeginAt;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public global::System.DateTime BeginAt {
            get {
                return this._BeginAt;
            }
            set {
                this._BeginAt = value;
            }
        }
        
        private global::Microsoft.Robotics.RoboChamps.MarsChallenger.Proxy.SensorInterval _SI;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public global::Microsoft.Robotics.RoboChamps.MarsChallenger.Proxy.SensorInterval SI {
            get {
                return this._SI;
            }
            set {
                this._SI = value;
            }
        }
        
        private global::Microsoft.Robotics.RoboChamps.MarsChallenger.Proxy.Mission _current_M;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public global::Microsoft.Robotics.RoboChamps.MarsChallenger.Proxy.Mission current_M {
            get {
                return this._current_M;
            }
            set {
                this._current_M = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current MarsChallengerState to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.RoboChamps.MarsChallenger.Proxy.MarsChallengerState typedTarget = ((global::Microsoft.Robotics.RoboChamps.MarsChallenger.Proxy.MarsChallengerState)(target));
            typedTarget._State = this._State;
            if ((this._SpectrometerData != null)) {
                global::Microsoft.Robotics.RoboChamps.MarsSpectrometer.Proxy.MarsSpectrometerState tmp = new global::Microsoft.Robotics.RoboChamps.MarsSpectrometer.Proxy.MarsSpectrometerState();
                ((Microsoft.Dss.Core.IDssSerializable)(this._SpectrometerData)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp)));
                typedTarget._SpectrometerData = tmp;
            }
            if ((this._FrontCamData != null)) {
                global::Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.Proxy.ImageResult tmp0 = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.Proxy.ImageResult();
                ((Microsoft.Dss.Core.IDssSerializable)(this._FrontCamData)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp0)));
                typedTarget._FrontCamData = tmp0;
            }
            if ((this._RearCamData != null)) {
                global::Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.Proxy.ImageResult tmp1 = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.Proxy.ImageResult();
                ((Microsoft.Dss.Core.IDssSerializable)(this._RearCamData)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp1)));
                typedTarget._RearCamData = tmp1;
            }
            if ((this._DriveState != null)) {
                global::Microsoft.Robotics.RoboChamps.MarsChallenger.Proxy.DriveState tmp2 = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.Proxy.DriveState();
                ((Microsoft.Dss.Core.IDssSerializable)(this._DriveState)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp2)));
                typedTarget._DriveState = tmp2;
            }
            if ((this._HeadState != null)) {
                global::Microsoft.Robotics.RoboChamps.MarsChallenger.Proxy.HeadState tmp3 = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.Proxy.HeadState();
                ((Microsoft.Dss.Core.IDssSerializable)(this._HeadState)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp3)));
                typedTarget._HeadState = tmp3;
            }
            typedTarget._BeginAt = this._BeginAt;
            if ((this._SI != null)) {
                global::Microsoft.Robotics.RoboChamps.MarsChallenger.Proxy.SensorInterval tmp4 = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.Proxy.SensorInterval();
                ((Microsoft.Dss.Core.IDssSerializable)(this._SI)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp4)));
                typedTarget._SI = tmp4;
            }
            if ((this._current_M != null)) {
                global::Microsoft.Robotics.RoboChamps.MarsChallenger.Proxy.Mission tmp5 = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.Proxy.Mission();
                ((Microsoft.Dss.Core.IDssSerializable)(this._current_M)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp5)));
                typedTarget._current_M = tmp5;
            }
        }
        
        /// <summary>
        ///Clones MarsChallengerState
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.RoboChamps.MarsChallenger.Proxy.MarsChallengerState target0 = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.Proxy.MarsChallengerState();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current MarsChallengerState to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(((int)(this._State)));
            if ((this._SpectrometerData == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._SpectrometerData)).Serialize(writer);
            }
            if ((this._FrontCamData == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._FrontCamData)).Serialize(writer);
            }
            if ((this._RearCamData == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._RearCamData)).Serialize(writer);
            }
            if ((this._DriveState == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._DriveState)).Serialize(writer);
            }
            if ((this._HeadState == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._HeadState)).Serialize(writer);
            }
            global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.SerializeDateTime(this._BeginAt, writer);
            if ((this._SI == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._SI)).Serialize(writer);
            }
            if ((this._current_M == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._current_M)).Serialize(writer);
            }
        }
        
        /// <summary>
        ///Deserializes MarsChallengerState
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized MarsChallengerState</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._State = ((global::Microsoft.Robotics.RoboChamps.MarsChallenger.Proxy.RoverState)(reader.ReadInt32()));
            if ((reader.ReadByte() != 0)) {
                this._SpectrometerData = ((global::Microsoft.Robotics.RoboChamps.MarsSpectrometer.Proxy.MarsSpectrometerState)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.RoboChamps.MarsSpectrometer.Proxy.MarsSpectrometerState())).Deserialize(reader)));
            }
            if ((reader.ReadByte() != 0)) {
                this._FrontCamData = ((global::Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.Proxy.ImageResult)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.Proxy.ImageResult())).Deserialize(reader)));
            }
            if ((reader.ReadByte() != 0)) {
                this._RearCamData = ((global::Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.Proxy.ImageResult)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.Proxy.ImageResult())).Deserialize(reader)));
            }
            if ((reader.ReadByte() != 0)) {
                this._DriveState = ((global::Microsoft.Robotics.RoboChamps.MarsChallenger.Proxy.DriveState)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.RoboChamps.MarsChallenger.Proxy.DriveState())).Deserialize(reader)));
            }
            if ((reader.ReadByte() != 0)) {
                this._HeadState = ((global::Microsoft.Robotics.RoboChamps.MarsChallenger.Proxy.HeadState)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.RoboChamps.MarsChallenger.Proxy.HeadState())).Deserialize(reader)));
            }
            this._BeginAt = global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.DeserializeDateTime(reader);
            if ((reader.ReadByte() != 0)) {
                this._SI = ((global::Microsoft.Robotics.RoboChamps.MarsChallenger.Proxy.SensorInterval)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.RoboChamps.MarsChallenger.Proxy.SensorInterval())).Deserialize(reader)));
            }
            if ((reader.ReadByte() != 0)) {
                this._current_M = ((global::Microsoft.Robotics.RoboChamps.MarsChallenger.Proxy.Mission)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.RoboChamps.MarsChallenger.Proxy.Mission())).Deserialize(reader)));
            }
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://www.robochamps.com/2009/02/marschallenger.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.robochamps.com/2009/02/marschallenger.html", ElementName="DriveState")]
    public class DriveState : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public DriveState() {
        }
        
        /// <summary>
        ///Copies the data member values of the current DriveState to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.RoboChamps.MarsChallenger.Proxy.DriveState typedTarget = ((global::Microsoft.Robotics.RoboChamps.MarsChallenger.Proxy.DriveState)(target));
        }
        
        /// <summary>
        ///Clones DriveState
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.RoboChamps.MarsChallenger.Proxy.DriveState target0 = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.Proxy.DriveState();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current DriveState to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
        }
        
        /// <summary>
        ///Deserializes DriveState
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized DriveState</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://www.robochamps.com/2009/02/marschallenger.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.robochamps.com/2009/02/marschallenger.html", ElementName="HeadState")]
    public class HeadState : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public HeadState() {
        }
        
        /// <summary>
        ///Copies the data member values of the current HeadState to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.RoboChamps.MarsChallenger.Proxy.HeadState typedTarget = ((global::Microsoft.Robotics.RoboChamps.MarsChallenger.Proxy.HeadState)(target));
        }
        
        /// <summary>
        ///Clones HeadState
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.RoboChamps.MarsChallenger.Proxy.HeadState target0 = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.Proxy.HeadState();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current HeadState to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
        }
        
        /// <summary>
        ///Deserializes HeadState
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized HeadState</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://www.robochamps.com/2009/02/marschallenger.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.robochamps.com/2009/02/marschallenger.html", ElementName="SensorInterval")]
    public class SensorInterval : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public SensorInterval() {
        }
        
        /// <summary>
        ///Copies the data member values of the current SensorInterval to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.RoboChamps.MarsChallenger.Proxy.SensorInterval typedTarget = ((global::Microsoft.Robotics.RoboChamps.MarsChallenger.Proxy.SensorInterval)(target));
        }
        
        /// <summary>
        ///Clones SensorInterval
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.RoboChamps.MarsChallenger.Proxy.SensorInterval target0 = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.Proxy.SensorInterval();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current SensorInterval to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
        }
        
        /// <summary>
        ///Deserializes SensorInterval
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized SensorInterval</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://www.robochamps.com/2009/02/marschallenger.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.robochamps.com/2009/02/marschallenger.html", ElementName="Mission")]
    public class Mission : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public Mission() {
        }
        
        /// <summary>
        ///Copies the data member values of the current Mission to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.RoboChamps.MarsChallenger.Proxy.Mission typedTarget = ((global::Microsoft.Robotics.RoboChamps.MarsChallenger.Proxy.Mission)(target));
        }
        
        /// <summary>
        ///Clones Mission
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.RoboChamps.MarsChallenger.Proxy.Mission target0 = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.Proxy.Mission();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current Mission to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
        }
        
        /// <summary>
        ///Deserializes Mission
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized Mission</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://www.robochamps.com/2009/02/marschallenger.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.robochamps.com/2009/02/marschallenger.html", ElementName="InitializeRequest")]
    public class InitializeRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public InitializeRequest() {
        }
        
        /// <summary>
        ///Copies the data member values of the current InitializeRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.RoboChamps.MarsChallenger.Proxy.InitializeRequest typedTarget = ((global::Microsoft.Robotics.RoboChamps.MarsChallenger.Proxy.InitializeRequest)(target));
        }
        
        /// <summary>
        ///Clones InitializeRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.RoboChamps.MarsChallenger.Proxy.InitializeRequest target0 = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.Proxy.InitializeRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current InitializeRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
        }
        
        /// <summary>
        ///Deserializes InitializeRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized InitializeRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            return this;
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Get : global::Microsoft.Dss.ServiceModel.Dssp.Get<global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.RoboChamps.MarsChallenger.Proxy.MarsChallengerState, global:: W3C.Soap.Fault>> {
        
        public Get() {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) : 
                base(body) {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.RoboChamps.MarsChallenger.Proxy.MarsChallengerState, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Initialize : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.RoboChamps.MarsChallenger.Proxy.InitializeRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault>> {
        
        public Initialize() {
        }
        
        public Initialize(global::Microsoft.Robotics.RoboChamps.MarsChallenger.Proxy.InitializeRequest body) : 
                base(body) {
        }
        
        public Initialize(global::Microsoft.Robotics.RoboChamps.MarsChallenger.Proxy.InitializeRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class MarsChallengerOperations : global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup, global:: Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop, global:: Microsoft.Robotics.RoboChamps.MarsChallenger.Proxy.Get, global:: Microsoft.Robotics.RoboChamps.MarsChallenger.Proxy.Initialize, global:: Microsoft.Dss.Core.DsspHttp.HttpGet> {
        
        public MarsChallengerOperations() {
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup() {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop() {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.RoboChamps.MarsChallenger.Proxy.MarsChallengerState, global:: W3C.Soap.Fault> Get() {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            global::Microsoft.Robotics.RoboChamps.MarsChallenger.Proxy.Get operation = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(out global::Microsoft.Robotics.RoboChamps.MarsChallenger.Proxy.Get operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            operation = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.RoboChamps.MarsChallenger.Proxy.MarsChallengerState, global:: W3C.Soap.Fault> Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            global::Microsoft.Robotics.RoboChamps.MarsChallenger.Proxy.Get operation = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, out global::Microsoft.Robotics.RoboChamps.MarsChallenger.Proxy.Get operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            operation = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> Initialize() {
            global::Microsoft.Robotics.RoboChamps.MarsChallenger.Proxy.InitializeRequest body = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.Proxy.InitializeRequest();
            global::Microsoft.Robotics.RoboChamps.MarsChallenger.Proxy.Initialize operation = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.Proxy.Initialize(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Initialize(out global::Microsoft.Robotics.RoboChamps.MarsChallenger.Proxy.Initialize operation) {
            global::Microsoft.Robotics.RoboChamps.MarsChallenger.Proxy.InitializeRequest body = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.Proxy.InitializeRequest();
            operation = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.Proxy.Initialize(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> Initialize(global::Microsoft.Robotics.RoboChamps.MarsChallenger.Proxy.InitializeRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.Proxy.InitializeRequest();
            }
            global::Microsoft.Robotics.RoboChamps.MarsChallenger.Proxy.Initialize operation = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.Proxy.Initialize(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Initialize(global::Microsoft.Robotics.RoboChamps.MarsChallenger.Proxy.InitializeRequest body, out global::Microsoft.Robotics.RoboChamps.MarsChallenger.Proxy.Initialize operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.Proxy.InitializeRequest();
            }
            operation = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.Proxy.Initialize(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.Core.DsspHttp.HttpResponseType, global::W3C.Soap.Fault> HttpGet() {
            global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            global::Microsoft.Dss.Core.DsspHttp.HttpGet operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice HttpGet(out global::Microsoft.Dss.Core.DsspHttp.HttpGet operation) {
            global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.Core.DsspHttp.HttpResponseType, global::W3C.Soap.Fault> HttpGet(global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            }
            global::Microsoft.Dss.Core.DsspHttp.HttpGet operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice HttpGet(global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body, out global::Microsoft.Dss.Core.DsspHttp.HttpGet operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            }
            operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://www.robochamps.com/2009/02/marschallenger.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.robochamps.com/2009/02/marschallenger.html", ElementName="RoverState")]
    public enum RoverState : int {
        
        Test = 0,
        
        Initialize = 1,
        
        Navigate = 2,
        
        EndMission = 3,
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    [global::System.ComponentModel.DescriptionAttribute("zero.lin\'s Mars Challenger Service")]
    [global::System.ComponentModel.DisplayNameAttribute("MarsChallenger")]
    public class Contract {
        
        public const string Identifier = "http://www.robochamps.com/2009/02/marschallenger.html";
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="service">service path</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, string service, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://www.robochamps.com/2009/02/marschallenger.html", service);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://www.robochamps.com/2009/02/marschallenger.html", null);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
    }
    
    public class CombinedOperationsPort : global::Microsoft.Dss.Core.DssCombinedOperationsPort {
        
        public CombinedOperationsPort() {
            this.MarsChallengerOperations = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.Proxy.MarsChallengerOperations();
            base.Initialize(new global::Microsoft.Dss.Core.DssOperationsPortMetadata(this.MarsChallengerOperations, "http://www.robochamps.com/2009/02/marschallenger.html", "MarsChallengerOperations", ""));
        }
        
        public global::Microsoft.Robotics.RoboChamps.MarsChallenger.Proxy.MarsChallengerOperations MarsChallengerOperations;
    }
}
namespace Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.Proxy {
    
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://www.robochamps.com/2009/02/marschallenger/imageprocessing.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.robochamps.com/2009/02/marschallenger/imageprocessing.html", ElementName="ImageResult")]
    public class ImageResult : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public ImageResult() {
        }
        
        private global::System.DateTime _Timestamp;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public global::System.DateTime Timestamp {
            get {
                return this._Timestamp;
            }
            set {
                this._Timestamp = value;
            }
        }
        
        private Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.Proxy.target[] _Avoid;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.Proxy.target[] Avoid {
            get {
                return this._Avoid;
            }
            set {
                this._Avoid = value;
            }
        }
        
        private int[] _Edge;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public int[] Edge {
            get {
                return this._Edge;
            }
            set {
                this._Edge = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current ImageResult to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.Proxy.ImageResult typedTarget = ((global::Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.Proxy.ImageResult)(target));
            typedTarget._Timestamp = this._Timestamp;
            if ((this._Avoid != null)) {
                int count = this._Avoid.Length;
                global::Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.Proxy.target[] tmp = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.Proxy.target[count];
                for (int index = 0; (index < count); index = (index + 1)) {
                    global::Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.Proxy.target tmp0 = default(global::Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.Proxy.target);
                    if ((this._Avoid[index] != null)) {
                        global::Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.Proxy.target tmp1 = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.Proxy.target();
                        ((Microsoft.Dss.Core.IDssSerializable)(this._Avoid[index])).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp1)));
                        tmp0 = tmp1;
                    }
                    tmp[index] = tmp0;
                }
                typedTarget._Avoid = tmp;
            }
            if ((this._Edge != null)) {
                int count0 = this._Edge.Length;
                int[] tmp2 = new int[count0];
                global::System.Buffer.BlockCopy(this._Edge, 0, tmp2, 0, global::System.Buffer.ByteLength(this._Edge));
                typedTarget._Edge = tmp2;
            }
        }
        
        /// <summary>
        ///Clones ImageResult
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.Proxy.ImageResult target0 = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.Proxy.ImageResult();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current ImageResult to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.SerializeDateTime(this._Timestamp, writer);
            if ((this._Avoid == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(1);
                writer.Write(this._Avoid.Length);
                for (int indexAvoid = 0; (indexAvoid < this._Avoid.Length); indexAvoid = (indexAvoid + 1)) {
                    if ((this._Avoid[indexAvoid] == null)) {
                        writer.Write(((byte)(0)));
                    }
                    else {
                        writer.Write(((byte)(1)));
                        ((Microsoft.Dss.Core.IDssSerializable)(this._Avoid[indexAvoid])).Serialize(writer);
                    }
                }
            }
            if ((this._Edge == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(1);
                writer.Write(this._Edge.Length);
                for (int indexEdge = 0; (indexEdge < this._Edge.Length); indexEdge = (indexEdge + 1)) {
                    writer.Write(this._Edge[indexEdge]);
                }
            }
        }
        
        /// <summary>
        ///Deserializes ImageResult
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized ImageResult</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._Timestamp = global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.DeserializeDateTime(reader);
            if ((reader.ReadByte() != 0)) {
                int tmp3 = reader.ReadInt32();
                int count1 = reader.ReadInt32();
                this._Avoid = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.Proxy.target[count1];
                for (int index0 = 0; (index0 < count1); index0 = (index0 + 1)) {
                    if ((reader.ReadByte() != 0)) {
                        this._Avoid[index0] = ((global::Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.Proxy.target)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.Proxy.target())).Deserialize(reader)));
                    }
                }
            }
            if ((reader.ReadByte() != 0)) {
                int tmp4 = reader.ReadInt32();
                int count2 = reader.ReadInt32();
                this._Edge = new int[count2];
                for (int index1 = 0; (index1 < count2); index1 = (index1 + 1)) {
                    this._Edge[index1] = reader.ReadInt32();
                }
            }
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://www.robochamps.com/2009/02/marschallenger/imageprocessing.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.robochamps.com/2009/02/marschallenger/imageprocessing.html", ElementName="target")]
    public class target : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public target() {
        }
        
        private int _x;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public int x {
            get {
                return this._x;
            }
            set {
                this._x = value;
            }
        }
        
        private int _y;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public int y {
            get {
                return this._y;
            }
            set {
                this._y = value;
            }
        }
        
        private int _max_x;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public int max_x {
            get {
                return this._max_x;
            }
            set {
                this._max_x = value;
            }
        }
        
        private int _max_y;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public int max_y {
            get {
                return this._max_y;
            }
            set {
                this._max_y = value;
            }
        }
        
        private int _min_x;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public int min_x {
            get {
                return this._min_x;
            }
            set {
                this._min_x = value;
            }
        }
        
        private int _min_y;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public int min_y {
            get {
                return this._min_y;
            }
            set {
                this._min_y = value;
            }
        }
        
        private double _tan_left;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public double tan_left {
            get {
                return this._tan_left;
            }
            set {
                this._tan_left = value;
            }
        }
        
        private double _tan_right;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public double tan_right {
            get {
                return this._tan_right;
            }
            set {
                this._tan_right = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current target to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.Proxy.target typedTarget = ((global::Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.Proxy.target)(target));
            typedTarget._x = this._x;
            typedTarget._y = this._y;
            typedTarget._max_x = this._max_x;
            typedTarget._max_y = this._max_y;
            typedTarget._min_x = this._min_x;
            typedTarget._min_y = this._min_y;
            typedTarget._tan_left = this._tan_left;
            typedTarget._tan_right = this._tan_right;
        }
        
        /// <summary>
        ///Clones target
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.Proxy.target target0 = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.Proxy.target();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current target to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._x);
            writer.Write(this._y);
            writer.Write(this._max_x);
            writer.Write(this._max_y);
            writer.Write(this._min_x);
            writer.Write(this._min_y);
            writer.Write(this._tan_left);
            writer.Write(this._tan_right);
        }
        
        /// <summary>
        ///Deserializes target
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized target</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._x = reader.ReadInt32();
            this._y = reader.ReadInt32();
            this._max_x = reader.ReadInt32();
            this._max_y = reader.ReadInt32();
            this._min_x = reader.ReadInt32();
            this._min_y = reader.ReadInt32();
            this._tan_left = reader.ReadDouble();
            this._tan_right = reader.ReadDouble();
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://www.robochamps.com/2009/02/marschallenger/imageprocessing.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.robochamps.com/2009/02/marschallenger/imageprocessing.html", ElementName="ImageProcessingState")]
    public class ImageProcessingState : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public ImageProcessingState() {
        }
        
        private global::System.DateTime _LastProcessing;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public global::System.DateTime LastProcessing {
            get {
                return this._LastProcessing;
            }
            set {
                this._LastProcessing = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current ImageProcessingState to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.Proxy.ImageProcessingState typedTarget = ((global::Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.Proxy.ImageProcessingState)(target));
            typedTarget._LastProcessing = this._LastProcessing;
        }
        
        /// <summary>
        ///Clones ImageProcessingState
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.Proxy.ImageProcessingState target0 = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.Proxy.ImageProcessingState();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current ImageProcessingState to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.SerializeDateTime(this._LastProcessing, writer);
        }
        
        /// <summary>
        ///Deserializes ImageProcessingState
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized ImageProcessingState</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._LastProcessing = global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.DeserializeDateTime(reader);
            return this;
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Subscribe : global::Microsoft.Dss.ServiceModel.Dssp.Subscribe<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault>> {
        
        public Subscribe() {
        }
        
        public Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body) : 
                base(body) {
        }
        
        public Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class ProcessImage : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.Proxy.ImageResult, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault>> {
        
        public ProcessImage() {
        }
        
        public ProcessImage(global::Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.Proxy.ImageResult body) : 
                base(body) {
        }
        
        public ProcessImage(global::Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.Proxy.ImageResult body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class ImageProcessingOperations : global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup, global:: Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop, global:: Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.Proxy.Subscribe, global:: Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.Proxy.ProcessImage> {
        
        public ImageProcessingOperations() {
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup() {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop() {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault> Subscribe(global::Microsoft.Ccr.Core.IPort notificationPort, params System.Type[] types) {
            global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            global::Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.Proxy.Subscribe operation = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Subscribe(global::Microsoft.Ccr.Core.IPort notificationPort, out global::Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.Proxy.Subscribe operation, params System.Type[] types) {
            global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            operation = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault> Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.IPort notificationPort, params System.Type[] types) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            }
            global::Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.Proxy.Subscribe operation = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.IPort notificationPort, out global::Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.Proxy.Subscribe operation, params System.Type[] types) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            }
            operation = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> ProcessImage() {
            global::Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.Proxy.ImageResult body = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.Proxy.ImageResult();
            global::Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.Proxy.ProcessImage operation = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.Proxy.ProcessImage(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice ProcessImage(out global::Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.Proxy.ProcessImage operation) {
            global::Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.Proxy.ImageResult body = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.Proxy.ImageResult();
            operation = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.Proxy.ProcessImage(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> ProcessImage(global::Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.Proxy.ImageResult body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.Proxy.ImageResult();
            }
            global::Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.Proxy.ProcessImage operation = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.Proxy.ProcessImage(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice ProcessImage(global::Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.Proxy.ImageResult body, out global::Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.Proxy.ProcessImage operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.Proxy.ImageResult();
            }
            operation = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.Proxy.ProcessImage(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    [global::System.ComponentModel.DescriptionAttribute("The Mars Challenger Basic Camara Image Processing Service")]
    [global::System.ComponentModel.DisplayNameAttribute("Mars Image Processor")]
    public class Contract {
        
        public const string Identifier = "http://www.robochamps.com/2009/02/marschallenger/imageprocessing.html";
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="service">service path</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, string service, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://www.robochamps.com/2009/02/marschallenger/imageprocessing.html", service);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://www.robochamps.com/2009/02/marschallenger/imageprocessing.html", null);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
    }
    
    public class CombinedOperationsPort : global::Microsoft.Dss.Core.DssCombinedOperationsPort {
        
        public CombinedOperationsPort() {
            this.ImageProcessingOperations = new global::Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.Proxy.ImageProcessingOperations();
            base.Initialize(new global::Microsoft.Dss.Core.DssOperationsPortMetadata(this.ImageProcessingOperations, "http://www.robochamps.com/2009/02/marschallenger/imageprocessing.html", "ImageProcessingOperations", ""));
        }
        
        public global::Microsoft.Robotics.RoboChamps.MarsChallenger.ImageProcessing.Proxy.ImageProcessingOperations ImageProcessingOperations;
    }
}
